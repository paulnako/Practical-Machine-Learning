main = "Scatterplot for supp == VC")
xyplot(len[supp == "OJ"] ~ dose, xlab = "Dose", ylab = "Tooth Length (OJ)",
main = "Scatterplot for supp == OJ")
xyplot(len ~ dose | supp, xlab = "Dose", ylab = "Tooth Length",
main = "Tooth length by dose for a given supplement")
xyplot(len ~ dose, xlab = "Dose", ylab = "Tooth Length (VC)",
main = "Scatterplot for supp == VC")
xyplot(len ~ dose | supp, xlab = "Dose", ylab = "Tooth Length",
main = "Tooth length by dose for a given supplement")
xyplot(len ~ dose, xlab = "Dose", ylab = "Tooth Length",
main = "Scatterplot")
histogram(len, type = "density", xlab = "Tooth length") + densityplot(len)
qqnorm(len)
histogram(len, type = "density", xlab = "Tooth length") + densityplot(len)
xyplot(len ~ dose | supp, xlab = "Dose", ylab = "Tooth Length",
main = "Tooth length by dose for a given supplement")
xyplot(len ~ dose, xlab = "Dose", ylab = "Tooth Length",
main = "Scatterplot")
qqnorm(len)
qqnorm(len)
qqline(len,probs=c(0.25,0.75))
qqnorm(log(len))
qqline(log(len),probs=c(0.25,0.75))
qqnorm(len)
qqline(len),probs=c(0.25,0.75))
qqline(len, probs=c(0.25,0.75))
?t.test
bwplot(len ~ dose, xlab = "Dose", ylab = "Tooth Length",
main = "Scatterplot")
bwplot(len ~ dose | supp, xlab = "Dose", ylab = "Tooth Length",
main = "Tooth length by dose for a given supplement")
?xyplot
bwplot(len , xlab = "Dose", ylab = "Tooth Length",
main = "Scatterplot")
bwplot(len | dose , xlab = "Dose", ylab = "Tooth Length",
main = "Scatterplot")
bwplot(len ~ dose , xlab = "Dose", ylab = "Tooth Length",
main = "Scatterplot")
supp.t2 <- t.test(len~supp, paired=F, var.equal=F, data=ToothGrowth)
supp.t2
tsupp <- t.test(len~supp, paired=F, var.equal=FALSE, data=ToothGrowth)
tsupp
datavardose <- c(var(len[dose == 0.5]), var(len[dose == 1.0], var(len[dose == 2.0])))
datavardose <- c(var(len[dose == 0.5]), var(len[dose == 1.0]), var(len[dose == 2.0]))
datavarsupp
datavarsupp <- c(var(len[supp == "OJ"]), var(len[supp == "VC"]))
datavardose <- c(var(len[dose == 0.5]), var(len[dose == 1.0]), var(len[dose == 2.0]))
datavarsupp
datavardose
tdose.0.5.1 <- t.test(len[dose == 0.5) ~ len[dose == 1.0, paired = FALSE,
var.equal == TRUE, data = ToothGrowth]
tdose.0.5.1 <- t.test(len[dose == 0.5] ~ len[dose == 1.0], paired = FALSE,
var.equal == TRUE, data = ToothGrowth)
tsupp <- t.test(len~supp, paired = FALSE, var.equal = FALSE, data = ToothGrowth)
tsupp
?t.test
tdose.0.5.1 <- t.test(len[dose == 0.5] ~ len[dose == 1.0], paired = FALSE,
var.equal = TRUE, data = ToothGrowth)
tdose.0.5.1 <- t.test(len[dose == 0.5] ~ len[dose == 1.0], paired = FALSE,
var.equal = TRUE, data = ToothGrowth)
dose0.5 <- len[dose == 0.5]
dose0.5 <- len[dose == 0.5]
dose1 <- len[dose == 1.0]
dose2 <- len[dose == 2.0]
tdose.0.5.1 <- t.test(dose0.5 ~ dose1, paired = FALSE,
var.equal = TRUE, data = ToothGrowth)
tdose.0.5.1 <- t.test(len[dose == 0.5] ~ len[dose == 1.0], paired = FALSE,
var.equal = TRUE, data = ToothGrowth)
tdose.0.5.1 <- t.test(len[dose == 0.5] ~ len[dose == 1.0], paired = FALSE,
var.equal = TRUE)
tdose.0.5.1 <- t.test(len[dose == 0.5], len[dose == 1.0], paired = FALSE,
var.equal = TRUE)
tdose.0.5.2 <- t.test(len[dose == 0.5], len[dose == 2.0], paired = FALSE,
var.equal = FALSE)
tdose.1.2 <- t.test(len[dose == 1.0], len[dose == 2.0], paired = FALSE,
var.equal = FALSE)
tdose.0.5.1 ; tdose.0.5.2 ; tdose.1.2
xyplot(len ~ dose, xlab = "Dose", ylab = "Tooth Length",
main = "Scatterplot")
xyplot(len ~ dose | supp, xlab = "Dose", ylab = "Tooth Length",
main = "Tooth length by dose for a given supplement")
pvals <- seq(0.1, 0.9, by = 0.05)
coverage <- sapply(pvals, function(p) {
phats <- rbinom(nsim, prob = p, size = n)/n
ll <- phats - qnorm(0.975) * sqrt(phats * (1 - phats)/n)
ul <- phats + qnorm(0.975) * sqrt(phats * (1 - phats)/n)
mean(ll < p & ul > p)
})
##Define variables
n <- 40
lambda <- 0.2
nsim <- 1000
###Sample means
simmeans <- rowMeans(matrix(rexp(n*nsim, lambda), nsim, n))
hist(simmeans, breaks = 50, col = "red")
lines(density(simmeans))
?hist
pvals <- seq(0.1, 0.9, by = 0.05)
coverage <- sapply(pvals, function(p) {
phats <- rbinom(nsim, prob = p, size = n)/n
ll <- phats - qnorm(0.975) * sqrt(phats * (1 - phats)/n)
ul <- phats + qnorm(0.975) * sqrt(phats * (1 - phats)/n)
mean(ll < p & ul > p)
})
coverage
plot(coverage)
library(lattice); library(latticeExtra)
xyplot(coverage)
xyplot(coverage, simmeans)
plot(coverage, simmeans)
plot(coverage, pvals)
plot(pvals, coverage)
xyplot(pvals, coverage)
xyplot(as.numeric(pvals), coverage)
xyplot(as.numeric(pvals), as.numeric(coverage))
?plot
plot(pvals, coverage)
plot(pvals, coverage, type = "l")
lines(0.95)
plot(pvals, coverage, type = "l")
lines(0.95)
?lines
abline(h = 0.95)
pvals <- seq(0.1, 1, by = 0.05)
coverage <- sapply(pvals, function(p) {
phats <- rbinom(nsim, prob = p, size = n)/n
ll <- phats - qnorm(0.975) * sqrt(phats * (1 - phats)/n)
ul <- phats + qnorm(0.975) * sqrt(phats * (1 - phats)/n)
mean(ll < p & ul > p)
})
plot(pvals, coverage, type = "l")
abline(h = 0.95)
pvals <- seq(0.1, .95, by = 0.05)
coverage <- sapply(pvals, function(p) {
phats <- rbinom(nsim, prob = p, size = n)/n
ll <- phats - qnorm(0.975) * sqrt(phats * (1 - phats)/n)
ul <- phats + qnorm(0.975) * sqrt(phats * (1 - phats)/n)
mean(ll < p & ul > p)
})
plot(pvals, coverage, type = "l")
abline(h = 0.95)
pvals <- seq(0.1, .9, by = 0.05)
coverage <- sapply(pvals, function(p) {
phats <- rbinom(nsim, prob = p, size = n)/n
ll <- phats - qnorm(0.975) * sqrt(phats * (1 - phats)/n)
ul <- phats + qnorm(0.975) * sqrt(phats * (1 - phats)/n)
mean(ll < p & ul > p)
})
plot(pvals, coverage, type = "l")
abline(h = 0.95)
?plot
lvals <- seq(0.1, .9, by = 0.05)
coverage <- sapply(lvals, function(p) {
phats <- rbinom(nsim, prob = p, size = n)/n
ll <- phats - qnorm(0.975) * sqrt(phats * (1 - phats)/n)
ul <- phats + qnorm(0.975) * sqrt(phats * (1 - phats)/n)
mean(ll < p & ul > p)
})
plot(lvals, coverage, type = "l")
abline(h = 0.95)
lvals <- seq(0.1, .9, by = 0.05)
coverage <- sapply(lvals, function(p) {
phats <- rbinom(nsim, prob = p, size = n)/n
ll <- phats - qnorm(0.975) * sqrt(phats * (1 - phats)/n)
ul <- phats + qnorm(0.975) * sqrt(phats * (1 - phats)/n)
mean(ll < p & ul > p)
})
plot(lvals, coverage, type = "l", xlab = "Lambda Values",
main = "Evaluating the 95% confidence intervals for Lambda")
abline(h = 0.95)
?plot
qqplot(simmeans)
qqnorm(simmeans)
?qqnorm
qqnorm(simmeans)
qqline(simmeans, probs=c(0.25,0.75))
set.seed?
?set.seed
?set.seed
tsupp <- t.test(len~supp, paired = FALSE, var.equal = FALSE, data = ToothGrowth)
tsupp
#T-test comparing tooth length under 0.5 and 1.0 doses
tdose.0.5.1 <- t.test(len[dose == 0.5], len[dose == 1.0], paired = FALSE,                                              var.equal = TRUE)
tdose.0.5.1
#T-test comparing tooth length under 0.5 and 2.0 doses
tdose.0.5.2 <- t.test(len[dose == 0.5], len[dose == 2.0], paired = FALSE,
var.equal = FALSE)
tdose.0.5.2
#T-test comparing tooth length under 1.0 and 2.0 doses
tdose.1.2 <- t.test(len[dose == 1.0], len[dose == 2.0], paired = FALSE,
var.equal = FALSE)
tdose.1.2
#Load ToothGrowth data and any relevant packages
data <- ToothGrowth
attach(data)
library(lattice)
library (latticeExtra)
#Exploratory analysis
#Scatter Plots
xyplot(len ~ dose, xlab = "Dose", ylab = "Tooth Length",
main = "Scatterplot")
xyplot(len ~ dose | supp, xlab = "Dose", ylab = "Tooth Length",
main = "Tooth length by dose for a given supplement")
#Histogram with density overlay
histogram(len, type = "density", xlab = "Tooth length") + densityplot(len)
histogram(len[supp == "OJ"], type = "density", xlab = "Tooth length: OJ") +
densityplot(len[supp == "OJ"])
histogram(len[supp == "VC"], type = "density", xlab = "Tooth length: VC") +
densityplot(len[supp == "VC"])
qqnorm(len)
qqline(len, probs=c(0.25,0.75))
#We will assume a normal distribution for the purposes of this analysis.
#Using alpha == .05, we therefore assume the distribution of tooth lengths is not normal.
#Data summary
#Quantiles
summary(data)
#Variance
datavarsupp <- c(var(len[supp == "OJ"]), var(len[supp == "VC"]))
datavardose <- c(var(len[dose == 0.5]), var(len[dose == 1.0]), var(len[dose == 2.0]))
datavarsupp
datavardose
#For the analysis comparing differences by supplement, we will not assume equal variances
#For the analysis comparing differences between 0.5 doses and 1.0 doses, we will assume equal variances
#Standard Deviation
sqrt(datavar)
#Hypothesis tests
#T-test comparing tooth lenth and supplement
tsupp <- t.test(len~supp, paired = FALSE, var.equal = FALSE, data = ToothGrowth)
tsupp
#T-test comparing tooth length under 0.5 and 1.0 doses
tdose.0.5.1 <- t.test(len[dose == 0.5], len[dose == 1.0], paired = FALSE,                                              var.equal = TRUE)
tdose.0.5.1
#T-test comparing tooth length under 0.5 and 2.0 doses
tdose.0.5.2 <- t.test(len[dose == 0.5], len[dose == 2.0], paired = FALSE,
var.equal = FALSE)
tdose.0.5.2
#T-test comparing tooth length under 1.0 and 2.0 doses
tdose.1.2 <- t.test(len[dose == 1.0], len[dose == 2.0], paired = FALSE,
var.equal = FALSE)
tdose.1.2
?t.test
?rnorm
x <- rnorm(1000, mean = 1100, sd = 30)
t.test(x)
x <- rnorm(9, mean = 1100, sd = 30)
t.test(x)
x <- rnorm(9, mean = 1100, sd = 30)
t.test(x)
?qt
-2 + qt(.975, 8)
news <- rnorm(10, .3, sqrt(.6))
old <- rnorm(10, .5, sqrt(.68))
?t.test
t.test(news, old)
t.test(news, old, var.equal = TRUE)
#Load ToothGrowth data and any relevant packages
data <- ToothGrowth
attach(data)
library(lattice)
library (latticeExtra)
#Exploratory analysis
#Scatter Plots
xyplot(len ~ dose, xlab = "Dose", ylab = "Tooth Length",
main = "Scatterplot")
xyplot(len ~ dose | supp, xlab = "Dose", ylab = "Tooth Length",
main = "Tooth length by dose for a given supplement")
#Histogram with density overlay
histogram(len, type = "density", xlab = "Tooth length") + densityplot(len)
histogram(len[supp == "OJ"], type = "density", xlab = "Tooth length: OJ") +
densityplot(len[supp == "OJ"])
histogram(len[supp == "VC"], type = "density", xlab = "Tooth length: VC") +
densityplot(len[supp == "VC"])
qqnorm(len)
qqline(len, probs=c(0.25,0.75))
#We will assume a normal distribution for the purposes of this analysis.
#Using alpha == .05, we therefore assume the distribution of tooth lengths is not normal.
#Data summary
#Quantiles
summary(data)
#Variance
datavarsupp <- c(var(len[supp == "OJ"]), var(len[supp == "VC"]))
datavardose <- c(var(len[dose == 0.5]), var(len[dose == 1.0]), var(len[dose == 2.0]))
datavarsupp
datavardose
#For the analysis comparing differences by supplement, we will not assume equal variances
#For the analysis comparing differences between 0.5 doses and 1.0 doses, we will assume equal variances
#Standard Deviation
sqrt(datavar)
#Hypothesis tests
#T-test comparing tooth lenth and supplement
tsupp <- t.test(len~supp, paired = FALSE, var.equal = FALSE, data = ToothGrowth)
tsupp
#T-test comparing tooth length under 0.5 and 1.0 doses
tdose.0.5.1 <- t.test(len[dose == 0.5], len[dose == 1.0], paired = FALSE,                                              var.equal = TRUE)
tdose.0.5.1
#T-test comparing tooth length under 0.5 and 2.0 doses
tdose.0.5.2 <- t.test(len[dose == 0.5], len[dose == 2.0], paired = FALSE,
var.equal = FALSE)
tdose.0.5.2
#T-test comparing tooth length under 1.0 and 2.0 doses
tdose.1.2 <- t.test(len[dose == 1.0], len[dose == 2.0], paired = FALSE,
var.equal = FALSE)
tdose.1.2
t.dose.1.2$p-value
tdose.1.2$p-value
tdose.1.2$p.value
pvalues <- c(tdose.0.5.1$p.value, tdose.0.5.2$p.value, tdose.1.2$p.value)
?p.adjust
p.adjust(pvalues, method = "bonferroni")
?data.frame
x <- c(140, 138, 150, 148, 135)
y <- c(132, 135, 151, 146, 130)
?t.test
t.test(x, y)
t.test(x, y, alternative = "less")
t.test(x, y, alternative = "greater")
t.test(x, y, alternative = "two.sided")
t.test(x, y, alternative = "two.sided", var.equal = TRUE)
t.test(x, y, alternative = "two.sided")
alpha = 0.05
n = 100
z = qnorm(1 - alpha)
pnorm(mu0 + z * sigma/sqrt(n), mean = .01, sd = .04, lower.tail = FALSE)
pnorm(0 + z * sigma/sqrt(n), mean = .01, sd = .04, lower.tail = FALSE)
pnorm(0 + z * .04, mean = .01, sd = .04, lower.tail = FALSE)
x <- c(10, 2, 6, 12, 14, 15, 15, 24, 15, 25, 3,  12)
summary(X)
summary(x)
sd(x)
hist(x)
x <- c(10, 2, 6, 12, 14, 15, 15, 24, 15, 25, 3, 12)
summary(x)
sd(x)
hist(x)
quantile(x, probs = .25)
-2 - 0
3.5/2.1
5/3.3
install.packages(SDSFoundations); library(SDSFoundations)
install.packages("SDSFoundations"); library(SDSFoundations)
sqrt(.98488)
download.file("https://opendata.socrata.com/api/views/ddym-zvjk/rows.csv?accessType=DOWNLOAD", starbucks.csv", method = "curl")
starbucks <- read.csv("starbucks.csv")
library("leaflet")
leaflet() %>% addTiles() %>% setView(-84.3847, 33.7613, zoom = 16) %>%
addMarkers(data = starbucks, lat = ~ Latitude, lng = ~ Longitude, popup = starbucks$Name)
install.packages("devtools")
devtools::install_github("rstudio/leaflet")
download.file("https://opendata.socrata.com/api/views/ddym-zvjk/rows.csv?accessType=DOWNLOAD", starbucks.csv", method = "curl")
starbucks <- read.csv("starbucks.csv")
library("leaflet")
leaflet() %>% addTiles() %>% setView(-84.3847, 33.7613, zoom = 16) %>%
addMarkers(data = starbucks, lat = ~ Latitude, lng = ~ Longitude, popup = starbucks$Name)
download.file("https://opendata.socrata.com/api/views/ddym-zvjk/rows.csv?accessType=DOWNLOAD", "starbucks.csv", method = "curl")
starbucks <- read.csv("starbucks.csv")
library("leaflet")
leaflet() %>% addTiles() %>% setView(-84.3847, 33.7613, zoom = 16) %>%
addMarkers(data = starbucks, lat = ~ Latitude, lng = ~ Longitude, popup = starbucks$Name)
devtools::install_github("rstudio/leaflet")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("rstudio/leaflet")
#Set working directory
setwd("~/Desktop/Practical Machine Learning")
#Load packages
library(caret)
#Download files
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"pml-training.csv")
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
"pml-testing.csv")
#Read and clean Training data, extract a validation set
training <- read.csv("pml-training.csv", na.strings = "")
training <- training[,colSums(is.na(training)) == 0]
training <- training[, -3:5]
training <- training[, -c(3, 4, 5)]
for(i in 1:len(names(training[, 3:124]))){
training[, i] <- as.numeric(as.character(training[, i]))
}
for(i in 1:length(names(training[, 3:124]))){
training[, i] <- as.numeric(as.character(training[, i]))
}
training <- read.csv("pml-training.csv", na.strings = "")
training <- training[,colSums(is.na(training)) == 0]
training <- training[, -c(3, 4, 5)]
inTrain <- createDataPartition(y = training$classe, p = .5, list = FALSE)
training <- training[inTrain,]
validation <- training[-inTrain,]
#Read Testing
testing<- read.csv("pml-testing.csv")
modFit <- train(classe ~ ., method = "rf", data = training)
training[, 4:] <- as.numeric(as.character(training[, 4:]))
training[, 4:124] <- as.numeric(as.character(training[, 4:124]))
training <- read.csv("pml-training.csv", na.strings = "")
training <- training[,colSums(is.na(training)) == 0]
training <- training[, -c(3, 4, 5)]
training[, 4:124] <- as.numeric(training[, 4:124])
training[, 4:124] <- as.numeric(levels(training[, 4:124]))[training[, 4:124]]
training[, 4:124] <- as.numeric(levels(training[, 4:124]))
str(training$roll_belt)
type(training$roll_belt)
typeof(training$roll_belt)
class(training$roll_belt)
class(training$new_window)
for(i in length(names(training[,1:124]))){
if class(training[,i + 4]) == "factor"{
training[,i + 4] <- as.numeric(as.character(training[,i + 4]))
}
}
for(i in length(names(training[,1:124]))){
if class(training[,i + 4]) == "factor"{
training[,i + 4] <- as.numeric(as.character(training[,i + 4]))
}
}
View(testing)
training <- read.csv("pml-training.csv", na.strings = "")
training <- training[,colSums(is.na(testing)) == 0]
training <- read.csv("pml-training.csv", na.strings = "")
training <- training[,colSums(is.na(testing)) == 0]
inTrain <- createDataPartition(y = training$classe, p = .5, list = FALSE)
training <- training[inTrain,]
validation <- training[-inTrain,]
#Read Testing
testing<- read.csv("pml-testing.csv")
#K-fold cross validation, k = 10
#crossval <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
#Model creation
modFit <- train(classe ~ ., method = "rf", prox = TRUE, data = training)
modFit$finalmodel
View(training)
modFit$finalmodel
modFit
predict(modFit, newdata = validation)
predval <- predict(modFit, newdata = validation)
validation$predright <- predval == validation$classe
table(predval, validation$classe)
predTest <- predict(modFit, newdata = testing)
predTest
predTest <- predict(modFit, newdata = testing)
predTest
predTest <- as.character(predict(modFit, newdata = testing))
predTest
predTest <- predict(modFit, newdata = testing)
predTest
predTest <- predict(modFit, newdata = testing)
predTest
predTest <- as.character(predict(modFit, newdata = testing))
predTest
testing<- read.csv("pml-testing.csv")
predTest <- predict(modFit, newdata = testing
predTest
predTest <- predict(modFit, newdata = testing)
predTest
modFitBoost <- train(classe ~ ., method = "gbm", verbose = FALSE, data = training)
modfitTree <- train(classe ~ ., method = "rpart", trControl = crossval,
verbose = FALSE, data = training)
crossval <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
modfitTree <- train(classe ~ ., method = "rpart", trControl = crossval,
verbose = FALSE, data = training)
modfitGLM <- train(classe ~ ., method = "glm", preProcess = c("center", "scale"),
trControl = crossval, data = training, verbose = FALSE)
modfitGLM <- train(classe ~ ., method = "glm", preProcess = c("center", "scale"),
trControl = crossval, data = training)
warnings()
modfitGLM <- train(classe ~ ., method = "glm", preProcess = c("center", "scale"),
data = training)
warnings()
modfitTree <- train(classe ~ ., method = "rpart", trControl = crossval,
verbose = FALSE, data = training)
modFitBoostcv <- train(classe ~ ., method = "gbm", verbose = FALSE,
data = training, trControl = crossval)
modfitBoostcv
modFitBoostcv
predval <- predict(modFitBoostcv, newdata = validation)
validation$predright <- predval == validation$classe
table(predval, validation$classe) #Woo hoo!
predTest <- predict(modFit, newdata = testing)
predTest
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files <- predTest
predTest <- predict(modFitBoostcv, newdata = testing)
predTest
pml_write_files(predTest)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(predTest)
training <- read.csv("pml-training.csv", na.strings = "")
training <- training[,colSums(is.na(testing)) == 0]
crossval <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
modFitBoostcv <- train(classe ~ ., method = "gbm", verbose = FALSE,
data = training, trControl = crossval)
modFitBoostcv
predTest <- predict(modFitBoostcv, newdata = testing)
predTest
training <- training[,colSums(is.na(testing)) == 0]
testing <- testing[,colSums(is.na(testing)) == 0]
predTest <- predict(modFitBoostcv, newdata = testing)
predTest
?download.file
set.seed(23)
View(training)
